{"version":3,"sources":["components/Nav.js","components/Header.js","components/GameImg.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","styles","nav","backgroundColor","color","a","fontSize","navItems","display","flexDirection","span1","position","right","span2","react_default","createElement","className","style","href","score","topScore","Header","jumbotron","backgroundAttachment","backgroundImage","backgroundPosition","minHeight","backgroundSize","paddingTop","innerJumb","fontWeight","GameImg","alt","name","src","image","height","margin","width","id","onClick","handleClick","Footer","App","state","images","imgList","selected","checkTopScore","_this","setState","event","persist","console","log","target","includes","shuffle","concat","Object","toConsumableArray","_this2","this","components_Nav","components_Header","map","item","components_GameImg","key","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f766032a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Nav(props) {\n    var styles = {\n        nav: {\n            backgroundColor: \"#DA071D\",\n            color: \"white\",\n        },\n        a: {\n            color: \"white\",\n            fontSize: \"calc(10px + 14 * (100vw - 320px)/ 800)\",\n        },\n        navItems: {\n            display: \"flex\",\n            flexDirection: \"row\",\n        },\n        span1: {\n            position: \"relative\",\n            right: \"40%\",\n            fontSize: \"calc(10px + 14 * (100vw - 320px)/ 800)\",\n        },\n        span2: {\n            fontSize: \"calc(10px + 14 * (100vw - 320px)/ 800)\",\n        },\n    }\n\n    return (\n        <div>\n            <nav className=\"navbar fixed-top\" style={styles.nav}>\n                <a className=\"navbar-brand mb-0 h3\" href=\"#\" style={styles.a}>Clicky Game</a>\n                <div className=\"navbar-nav\" style={styles.navItems}>\n                    <span className=\"nav-item mb-0 h1\" style={styles.span1}>\n                        Click an image to begin!\n                        </span>\n                    <span className=\"nav-item mb-0 h1\" style={styles.span2}>\n                        Score: {props.score} | Top Score: {props.topScore}\n                    </span>\n                </div>\n            </nav>\n        </div>\n    );\n};\n\nexport default Nav;","import React from 'react';\n\nfunction Header() {\n    var styles = {\n        jumbotron: {\n            backgroundAttachment: \"fixed\",\n            backgroundImage: \"url(./imgs/jumb.gif)\",\n            backgroundPosition: \"0 -250px\",\n            minHeight: \"500px\",\n            backgroundSize: \"100%\",\n            paddingTop: \"100px\",\n        },\n        innerJumb: {\n            color: \"white\",\n            fontWeight: \"bold\",\n        }\n    };\n\n    return (\n        <div className=\"jumbotron\" style={styles.jumbotron}>\n            <h1 className=\"display-4 d-flex justify-content-center\" style={styles.innerJumb}>Adventure Time Clicky Game</h1>\n            <p className=\"lead d-flex justify-content-center\" style={styles.innerJumb}>Click on an image to earn points, but don't click on any more than once!</p>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from \"react\";\n\nfunction GameImg(props) {\n    var styles = {\n        display: \"block\",\n        height: \"150px\",\n        margin: \"15px 55px\",\n        width: \"120px\"\n    }\n    return (\n        <img \n            alt={props.name} \n            src={props.image} \n            style={styles} \n            id={props.id}\n            onClick={props.handleClick}\n        />\n    );\n}\n\nexport default GameImg;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n\n    return (\n        <footer className=\"footer\">\n            <span>Clicky Game 2019</span>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Header from './components/Header';\nimport GameImg from './components/GameImg';\nimport imgList from './imgList.json';\nimport Footer from './components/Footer';\nimport shuffle from 'shuffle-array';\n\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    images: imgList,\n    selected: [],\n  }\n\n  checkTopScore = () => {\n    if (this.state.score > this.state.topScore) {\n      this.setState({\n        topScore: this.state.score,\n      });\n    };\n  }\n\n  handleClick = (event) => {\n    event.persist();\n    console.log(event);\n    var { id } = event.target;\n    if (!this.state.selected.includes(id) ) {\n      this.setState({\n        images: shuffle(this.state.images),\n        selected: [id, ...this.state.selected],\n        score: this.state.score + 1,\n      }, () => this.checkTopScore());\n    }\n    else {\n      this.setState({\n        images: shuffle(this.state.images),\n        selected: [],\n        score: 0,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Header />\n        <div id=\"game\" className=\"container\">\n          {this.state.images.map((item) => {\n            console.log(item.id)\n            return (\n              <GameImg\n                key={item.name}\n                image={item.image}\n                name={item.name}\n                id={item.id}\n                handleClick={this.handleClick}\n              />\n            );\n          })}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}